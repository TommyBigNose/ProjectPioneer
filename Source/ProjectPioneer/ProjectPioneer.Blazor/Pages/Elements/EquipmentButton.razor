@using ProjectPioneer.Blazor.Pages.Elements
@using ProjectPioneer.Blazor.Pages.Components;

@inject Systems.IGame ProjectPioneerGame
<img src="@GetItemArt(CurrentEquipment?.Equipment)" alt="@GetItemArtAlt(CurrentEquipment?.Equipment)"/>
<StandardButton ButtonClass="@GetItemStyle(CurrentEquipment)"
                ButtonText="@GetItemText()"
                ClickCallback="@ClickCallback"
                ClickCallbackParameter="@CurrentEquipment?.Index.ToString()"/>

@code {
    [Parameter]
    public EventCallback<string> ClickCallback { get; set; }

    [Parameter]
    public EquipmentDisplay? CurrentEquipment { get; set; }

    [Parameter]
    public EquipmentDisplay? SelectedEquipment { get; set; }

    [Parameter]
    public bool IsShop { get; set; }

    private string GetCanEquipSymbol(IEquipment? equipment)
    {
        return Utility.SymbolHelper.GetCheckmarkOrX((equipment != null && ProjectPioneerGame.CanEquip(equipment)));
    }

    private string GetValue(IEquipment? equipment)
    {
        return (IsShop ? equipment?.GetPurchaseValue().ToString() : equipment?.GetSellableValue().ToString()) ?? string.Empty;
    }

    private string GetItemStyle(EquipmentDisplay? equipmentDisplay)
    {
        return (SelectedEquipment?.Index == equipmentDisplay?.Index && SelectedEquipment?.Equipment == equipmentDisplay?.Equipment) ? "btn btn-info" : "btn btn-warning";
    }

    private string GetItemText()
    {
        return $"{Utility.SymbolHelper.GetEquipmentSymbol(CurrentEquipment?.Equipment)} | {GetValue(CurrentEquipment?.Equipment)}: {CurrentEquipment?.Equipment?.Name} | {GetCanEquipSymbol(CurrentEquipment?.Equipment)}";
    }

    private string GetItemArt(IEquipment? equipment)
    {
        return $"art/equipment/{equipment?.ImageName}.png";
    }
    
    private string GetItemArtAlt(IEquipment? equipment)
    {
        return $"{equipment?.ImageName}.png";
    }
}
