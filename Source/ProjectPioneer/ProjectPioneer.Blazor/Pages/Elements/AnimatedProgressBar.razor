@using ProjectPioneer.Blazor.Models;
@using ProjectPioneer.Systems.Equipment;
@using ProjectPioneer.Systems.Statistics;

@inject ILogger<AnimatedProgressBar> Logger
@inject ProjectPioneer.Systems.IGame ProjectPioneerGame

@*<div class="progress" style="width: 40%">
    <div class="progress-bar bg-success" aria-valuenow="@CurrentValue" aria-valuemax="1000.0">
        
    </div>
    <div class="progress-bar bg-warning progress-bar-striped" aria-valuenow="@_addedValue" aria-valuemax="1000.0">
        
    </div>
    <div class="progress-bar bg-danger" aria-valuenow="@_currentValue" aria-valuemax="1000.0">
        
    </div>
</div>*@

<div class="progress" style="width: 40%">
    <div class="progress-bar bg-success" style="width: @_currentValuePercent">
    </div>
    <div class="progress-bar bg-warning progress-bar-striped" style="width: @_addedValuePercent">
    </div>
    @*<div class="progress-bar bg-danger" style="width: 10%">
    </div>*@
</div>

@*<div class="progress" style="width: 40%">
    <div class="progress-bar bg-success" style="width: 35%">
        
    </div>
    <div class="progress-bar bg-warning progress-bar-striped" style="width: 20%">
        
    </div>
    <div class="progress-bar bg-danger" style="width: 10%">
        
    </div>
</div>*@

<table>
    <tr>
        <td>
            <button type="button" class="btn btn-warning" @onclick="@(_ => AddValue())">
                Add Value short
            </button>

            <button type="button" class="btn btn-warning" @onclick="@(_ => AddValue())">
                Add Value medium
            </button>

            <button type="button" class="btn btn-warning" @onclick="@(_ => AddValue())">
                Add Value long
            </button>
        </td>
    </tr>
</table>

@code {
    [Parameter]
    public float CurrentValue { get; set; } = 0.0f;

    [Parameter]
    public float IncomingAdditionalValue { get; set; } = 0.0f;

    [Parameter]
    public int FillInDelay_ms { get; set; } = 300;

    [Parameter]
    public float MaxValue { get; set; } = 1000.0f;

    private string _currentValuePercent = "0%";
    private float _addedValue = 0.0f;
    private string _addedValuePercent = "0%";

    public async Task AddValue()
    {
        if (CurrentValue < MaxValue)
        {
            int currentValuePercent = (int)((CurrentValue / MaxValue) * 100);
            int addedValuePercent = (int)((IncomingAdditionalValue / MaxValue) * 100);
            _currentValuePercent = $"{currentValuePercent}%";
            _addedValuePercent = $"{addedValuePercent}%";
            _addedValue += IncomingAdditionalValue;
            CurrentValue += _addedValue;
            if (CurrentValue > MaxValue)
            {
                CurrentValue = MaxValue;
            }
            _addedValue = 0.0f;

            // Basically how long it waits in-between filling the incoming filled zone
            await Task.Delay(FillInDelay_ms);

            currentValuePercent = (int)((CurrentValue / MaxValue) * 100);
            addedValuePercent = 0;
            _currentValuePercent = $"{currentValuePercent}%";
            _addedValuePercent = $"{addedValuePercent}%";
            await base.InvokeAsync(StateHasChanged);
        }
    }
}
