@using ProjectPioneer.Blazor.Pages.Elements
@using ProjectPioneer.Blazor.Pages.Components;

@inject NavigationManager NavManager
@inject ILogger<QuestLogDisplay> Logger
@inject Systems.IGame ProjectPioneerGame

<h3>QuestLogDisplay</h3>

<StandardButton ButtonClass="btn-warning"
                ButtonText="Start Selected Quest"
                Disabled="@(_selectedQuest == null)"
                ClickCallback="@(_ => StartQuest())"
                ClickCallbackParameter=""/>
<br />
<br />

<table class="table" style="vertical-align: top; width: 60%">
    <thead>
        <tr>
            <th>Quest</th>
            @* <th>Compared Stats</th> *@
        </tr>
    </thead>
    <tbody>
        <tr>
            <td style="width: 60%">
                <div style="height:600px; overflow-y:scroll;">
                    @foreach (var quest in ProjectPioneerGame.GetAllQuests())
                    {
                        <StandardButton ButtonClass="@GetItemStyle(quest)"
                                        ButtonText="@GetQuestButtonText(quest)"
                                        ClickCallback="@(_ => SetDisplayedItem(quest))"
                                        ClickCallbackParameter=""/>
                        <br/>
                        <p class="@GetRecommendedLevelClass(quest)" style="width: 100px; --bs-bg-opacity: .5">Level: @quest.GetRecommendedLevel()</p>
                        @quest.QuestInfo.Description
                        <br/>

                        <span>Normal Equipment</span>
                        <br/>
                        @foreach (var equipment in quest.QuestInfo.NormalLoot!)
                        {
                            <QuestLootItemDisplay LootableItem="@equipment" ColorTheme="bg-secondary"/>
                        }
                        <span>Rare Equipment</span>
                        <br/>
                        <QuestLootItemDisplay LootableItem="@quest.QuestInfo.RareLoot" ColorTheme="bg-success"/>
                        <hr/>
                    }
                </div>
            </td>
            <td style="width: 40%">
                @if (_selectedQuest != null)
                {
                    <span>Stat Multiplier(s): @string.Join(',', _selectedQuest.QuestInfo.StatTypeMultipliers!)</span>
                    <CompareStatsDisplay Stats1="@ProjectPioneerGame.Hero.GetTotalsAsStats()" Stats2="@_selectedQuest.QuestInfo.Stats" Multipliers="@GetMultipliersAsStrings()" IsComparingForQuest="true"/>
                }
            </td>
        </tr>
    </tbody>
</table>


@code {
    [Parameter]
    public EventCallback<string> QuestLogCallback { get; set; }

    private IQuest? _selectedQuest;

    protected override void OnInitialized()
    {

        Refresh();
    }

    public void Refresh()
    {
        base.InvokeAsync(StateHasChanged);
    }

    private bool IsQuestCompleted(IQuest quest)
    {
        return ProjectPioneerGame.GetCompletedQuests().Contains(quest.QuestInfo.ID);
    }

    private void SetDisplayedItem(IQuest quest)
    {
        // Remove selection if the user is re-selecting it
        if (_selectedQuest != null && _selectedQuest.QuestInfo.ID == quest.QuestInfo.ID)
        {
            _selectedQuest = null;
        }
        else
        {
            _selectedQuest = quest;
        }
    }

    private string GetRecommendedLevelClass(IQuest quest)
    {
        return (ProjectPioneerGame.Hero.Stats.Level >= quest.GetRecommendedLevel()) ? "bg-success" : "bg-danger";
    }

    private string GetItemStyle(IQuest quest)
    {
        return (_selectedQuest != null && _selectedQuest.QuestInfo.ID == quest.QuestInfo.ID) ? "btn btn-info" : "btn btn-warning";
    }

    private void StartQuest()
    {
        NavManager.NavigateTo($"/Adventure/QuestPage/{_selectedQuest?.QuestInfo.ID}");
    }

    private List<string> GetMultipliersAsStrings()
    {
        return _selectedQuest?.QuestInfo.StatTypeMultipliers!.Select(_ => _.ToString()).ToList()!;
    }

    private string GetQuestButtonText(IQuest quest)
    {
        return $"{Utility.SymbolHelper.GetCheckmarkOrX(IsQuestCompleted(quest))} | {quest.QuestInfo.Name}";
    }
}
