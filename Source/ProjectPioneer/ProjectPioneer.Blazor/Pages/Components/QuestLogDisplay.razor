@using ProjectPioneer.Systems.Adventure;

@inject NavigationManager NavManager
@inject ILogger<QuestLogDisplay> Logger
@inject ProjectPioneer.Systems.IGame ProjectPioneerGame

<h3>QuestLogDisplay</h3>

<button type="button" class="btn btn-warning" disabled="@(_selectedQuest == null)" @onclick="@(_ => StartQuest())">
    Start Selected Quest
</button>
<br />
<br />

<table class="table">
    <thead>
        <tr>
            <th>Quest</th>
            <th>Compared Stats</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
               @foreach (var quest in ProjectPioneerGame.GetAllQuests())
                {
                    <button type="button" class="btn @GetItemStyle(quest)" @onclick="@(_ => SetDisplayedItem(quest))">
                        @(IsQuestCompleted(quest) ? "✅" : "❌") | @quest.QuestInfo.Name
                    </button>
                    <br />
                    <p class="@GetRecommendedLevelClass(quest)" style="width: 100px; --bs-bg-opacity: .5">Level: @quest.GetRecommendedLevel()</p>
                    @quest.QuestInfo.Description
                    <br />
                    <hr />
                }
            </td>
            <td>
                @if (_selectedQuest != null && _selectedQuest.QuestInfo != null)
                {
                    <span>Stat Multiplier(s): @string.Join(',',_selectedQuest.QuestInfo.StatTypeMultipliers)</span>
                    <CompareStatsDisplay Stats1="@ProjectPioneerGame.Hero.GetTotalsAsStats()" Stats2="@_selectedQuest.QuestInfo.Stats" Multipliers="@GetMultipliersAsStrings()" />
                }
            </td>
        </tr>
    </tbody>
</table>






@code {
    [Parameter]
    public EventCallback<string> QuestLogCallback { get; set; }

    private IQuest _selectedQuest;

    protected override void OnInitialized()
    {

        Refresh();
    }

    public void Refresh()
    {
        base.InvokeAsync(StateHasChanged);
    }

    private bool IsQuestCompleted(IQuest quest)
    {
        return ProjectPioneerGame.GetCompletedQuests().Contains(quest.QuestInfo.ID);
    }

    private void SetDisplayedItem(IQuest quest)
    {
        // Remove selection if the user is re-selecting it
        if (_selectedQuest != null && _selectedQuest.QuestInfo.ID == quest.QuestInfo.ID)
        {
            _selectedQuest = null;
        }
        else
        {
            _selectedQuest = quest;
        }
    }

    private string GetRecommendedLevelClass(IQuest quest)
    {
        return (ProjectPioneerGame.Hero.Stats.Level >= quest.GetRecommendedLevel()) ? "bg-success" : "bg-danger";
    }

    private string GetItemStyle(IQuest quest)
    {
        return (_selectedQuest != null && _selectedQuest.QuestInfo.ID == quest.QuestInfo.ID) ? "btn btn-info" : "btn btn-warning";
    }

    private void StartQuest()
    {
        NavManager.NavigateTo($"/Adventure/QuestPage/{_selectedQuest.QuestInfo.ID}");
    }

    private List<string> GetMultipliersAsStrings()
    {
        return _selectedQuest.QuestInfo.StatTypeMultipliers.Select(_ => _.ToString()).ToList();
    }
}
