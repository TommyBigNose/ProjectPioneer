@using ProjectPioneer.Systems.Equipment;
@inject ILogger<DebugTools> Logger
@inject ProjectPioneer.Systems.IGame ProjectPioneerGame

<h3>Debug Tools</h3>

<table>
    <tr>
        <td>
            <button type="button" class="btn btn-warning" @onclick="@(_ => AddRandomEquipmentAsync())">
                Add Random Equipment
            </button>
        </td>
        <td>
            <button type="button" class="btn btn-warning" @onclick="@(_ => AddExpToHeroAsync(10000))">
                Add 10000 Exp
            </button>
        </td>
        <td>
            <button type="button" class="btn btn-warning" @onclick="@(_ => AddCreditsAsync(10000))">
                Add 10000 Credits
            </button>
        </td>
    </tr>
</table>






@code {
    [Parameter]
    public EventCallback<string> DebugCallback { get; set; }

    private async Task AddRandomEquipmentAsync()
    {
        List<IEquipment> equipmentList = ProjectPioneerGame.GetAllPossibleEquipment().ToList();
        int max = equipmentList.Count;
        IEquipment equipment = equipmentList[ProjectPioneerGame.GetDiceRoll(0, max)];
        ProjectPioneerGame.AddEquipment(equipment);

        await DebugCallback.InvokeAsync();
        Logger.LogInformation("Added random equipment {0}", equipment.Name);
    }

    private async Task AddExpToHeroAsync(int exp)
    {
        ProjectPioneerGame.AddExp(exp);
        while (ProjectPioneerGame.CanLevelUp())
        {
            ProjectPioneerGame.LevelUp();
        }

        await DebugCallback.InvokeAsync();
        Logger.LogInformation("Added exp to hero {0}", exp);
    }

    private async Task AddCreditsAsync(int credits)
    {
        ProjectPioneerGame.AddCredits(credits);
        while (ProjectPioneerGame.CanLevelUp())
        {
            ProjectPioneerGame.LevelUp();
        }

        await DebugCallback.InvokeAsync();
        Logger.LogInformation("Added credits {0}", credits);
    }

}
