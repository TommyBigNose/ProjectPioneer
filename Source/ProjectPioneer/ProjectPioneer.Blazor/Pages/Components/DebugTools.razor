@using ProjectPioneer.Blazor.Pages.Elements
@using ProjectPioneer.Blazor.Pages.Components;

@inject ILogger<DebugTools> Logger
@inject ProjectPioneer.Systems.IGame ProjectPioneerGame

<h3>Debug Tools</h3>

<table>
    <tr>
        <td>
            <StandardButton ButtonClass="btn-warning"
                            ButtonText="Add Random Equipment"
                            ClickCallback="@AddRandomEquipmentAsync"
                            ClickCallbackParameter=""/>
        </td>
        <td>
            <StandardButton ButtonClass="btn-warning"
                            ButtonText="Add 10000 Exp"
                            ClickCallback="@AddExpToHeroAsync"
                            ClickCallbackParameter="10000"/>
        </td>
        <td>
            <StandardButton ButtonClass="btn-warning"
                            ButtonText="Add 10000 Credits"
                            ClickCallback="@AddCreditsAsync"
                            ClickCallbackParameter="10000"/>
        </td>
    </tr>
</table>

@code {
    [Parameter]
    public EventCallback<string> DebugCallback { get; set; }

    private async void AddRandomEquipmentAsync(string input)
    {
        List<IEquipment> equipmentList = ProjectPioneerGame.GetAllPossibleEquipment().ToList();
        int max = equipmentList.Count;
        IEquipment equipment = equipmentList[ProjectPioneerGame.GetDiceRoll(0, max)];
        ProjectPioneerGame.AddEquipment(equipment);

        await DebugCallback.InvokeAsync();
        Logger.LogInformation("Added random equipment {0}", equipment.Name);
    }

    private async void AddExpToHeroAsync(string expString)
    {
        bool isValid = int.TryParse(expString, out int exp);
        if (!isValid) return;
        
        ProjectPioneerGame.AddExp(exp);
        while (ProjectPioneerGame.CanLevelUp())
        {
            ProjectPioneerGame.LevelUp();
        }

        await DebugCallback.InvokeAsync();
        Logger.LogInformation("Added exp to hero {0}", exp);
    }

    private async void AddCreditsAsync(string creditsString)
    {
        bool isValid = int.TryParse(creditsString, out int credits);
        if (!isValid) return;
        
        ProjectPioneerGame.AddCredits(credits);
        while (ProjectPioneerGame.CanLevelUp())
        {
            ProjectPioneerGame.LevelUp();
        }

        await DebugCallback.InvokeAsync();
        Logger.LogInformation("Added credits {0}", credits);
    }

}
