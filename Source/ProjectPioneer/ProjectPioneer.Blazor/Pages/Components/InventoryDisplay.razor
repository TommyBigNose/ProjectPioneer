@using ProjectPioneer.Systems.Equipment;

@inject ILogger<InventoryDisplay> Logger
@inject ProjectPioneer.Systems.IGame ProjectPioneerGame

<h3>InventoryDisplay</h3>

Credits: @ProjectPioneerGame.GetCredits()
<br />

<button type="button" class="btn btn-primary" disabled="@(_selectedEquipment.Equipment == null)" @onclick="@(_ => EquipSelectedItem())">
    Equip Selected Item
</button>
<br />
<button type="button" class="btn btn-danger" disabled="@(_selectedEquipment.Equipment == null)" @onclick="@(_ => SellSelectedItem())">
    Sell Selected Item
</button>
<br />
<br />

@foreach (var item in _equipmentCatalog)
{
    <button type="button" class="btn @GetItemStyle(item)" @onclick="@(_ => SetDisplayedItem(item))">
        @item.Equipment.Name
    </button>
    <br />
}

@code {
    [Parameter]
    public EventCallback<string> InventoryCallback { get; set; }

    List<IEquipment> _inventory;
    List<EquipmentDisplay> _equipmentCatalog;
    EquipmentDisplay _selectedEquipment;

    protected override void OnInitialized()
    {
        _equipmentCatalog = new();
        _selectedEquipment = new();
        _inventory = new();
        TrySetInitialEquipment();
    }

    public void Refresh()
    {
        _inventory.Clear();
        _equipmentCatalog.Clear();
        _inventory = ProjectPioneerGame.GetInventory().ToList();

        TrySetInitialEquipment();

        for (int i = 0; i < _inventory.Count; i++)
        {
            _equipmentCatalog.Add(new EquipmentDisplay()
            {
                Index = i,
                    Equipment = _inventory[i]
            });
        }
        base.InvokeAsync(StateHasChanged);
    }

    private void TrySetInitialEquipment()
    {
        if (_selectedEquipment.Equipment == null && _inventory.Count > 0)
        {
            _selectedEquipment = new EquipmentDisplay()
            {
                Index = 0,
                Equipment = _inventory[0]
            };
        }
    }

    private void EquipSelectedItem()
    {
        ProjectPioneerGame.EquipEquipment(_selectedEquipment.Equipment, ProjectPioneerGame.Hero);
        _selectedEquipment.Equipment = null;
        Refresh();
        InventoryCallback.InvokeAsync().ConfigureAwait(false).GetAwaiter().GetResult();
    }

    private void SellSelectedItem()
    {
        ProjectPioneerGame.SellEquipment(_selectedEquipment.Equipment);
        _selectedEquipment.Equipment = null;
        Refresh();
        InventoryCallback.InvokeAsync().ConfigureAwait(false).GetAwaiter().GetResult();
    }

    private void SetDisplayedItem(EquipmentDisplay equipmentDisplay)
    {
        _selectedEquipment = new EquipmentDisplay()
        {
            Index = equipmentDisplay.Index,
            Equipment = _inventory[equipmentDisplay.Index]
        };
    }

    private string GetItemStyle(EquipmentDisplay equipmentDisplay)
    {
        return (_selectedEquipment.Index == equipmentDisplay.Index && _selectedEquipment.Equipment == equipmentDisplay.Equipment) ? "btn btn-info" : "btn btn-warning";
    }

    public class EquipmentDisplay
    {
        public int Index { get; set; }
        public IEquipment Equipment { get; set; }
    }
}