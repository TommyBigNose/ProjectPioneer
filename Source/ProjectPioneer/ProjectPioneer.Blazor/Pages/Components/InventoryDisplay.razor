@using ProjectPioneer.Blazor.Pages.Elements
@using ProjectPioneer.Blazor.Pages.Components;

@inject ILogger<InventoryDisplay> Logger
@inject Systems.IGame ProjectPioneerGame

<h3>InventoryDisplay</h3>

Credits: @ProjectPioneerGame.GetCredits()
<br />

<StandardButton ButtonClass="btn-primary"
                ButtonText="Equip Selected Item"
                Disabled="@(!CanEquip(_selectedEquipment?.Equipment))"
                ClickCallback="@(_ => EquipSelectedItem())"
                ClickCallbackParameter=""/>

<StandardButton ButtonClass="btn-danger"
                ButtonText="Sell Selected Item"
                Disabled="@(_selectedEquipment?.Equipment == null)"
                ClickCallback="@(_ => SellSelectedItem())"
                ClickCallbackParameter=""/>

<StandardButton ButtonClass="btn-link"
                ButtonText="Sort Inventory"
                Disabled="@(_equipmentCatalog?.Count <= 1)"
                ClickCallback="@(_ => SortInventory())"
                ClickCallbackParameter=""/>

<table class="table" style="vertical-align: top; width: 100%">
    <thead>
        <tr>
            <th>Equipment</th>
             <th>Comparison</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                <div style="height:600px; overflow-y:scroll;">
                    @foreach (var item in _equipmentCatalog!)
                    {
                        <EquipmentButton ClickCallback="@SetDisplayedItemString" CurrentEquipment="@item" SelectedEquipment="@_selectedEquipment" IsShop=false/>
                        <br/>
                    }
                </div>
            </td>
            <td>
                @if(_selectedEquipment != null && _selectedEquipment.Equipment != null && _statsHeroEquipment != null)
                {
                    <CompareStatsDisplay Stats1="@_selectedEquipment.Equipment.Stats" Stats2="@_statsHeroEquipment" IsComparingForQuest="false"/>
                }
            </td>
        </tr>
    </tbody>
</table>


@code {
    [Parameter]
    public EventCallback<string> InventoryCallback { get; set; }

    List<IEquipment>? _inventory;
    List<EquipmentDisplay>? _equipmentCatalog;
    EquipmentDisplay? _selectedEquipment;

    Stats? _statsHeroEquipment;

    protected override void OnInitialized()
    {
        _equipmentCatalog = new();
        _selectedEquipment = new();
        _inventory = new();
        Refresh();
    }

    public void Refresh()
    {
        _inventory?.Clear();
        _equipmentCatalog?.Clear();
        _inventory = ProjectPioneerGame.GetInventory().ToList();

        for (int i = 0; i < _inventory.Count; i++)
        {
            _equipmentCatalog?.Add(new EquipmentDisplay()
            {
                Index = i,
                Equipment = _inventory[i]
            });
        }
        InvokeAsync(StateHasChanged);
    }

    private void TrySetInitialEquipment()
    {
        if (_selectedEquipment?.Equipment == null && _inventory?.Count > 0)
        {
            _selectedEquipment = new EquipmentDisplay()
            {
                Index = 0,
                Equipment = _inventory[0]
            };
        }
    }

    private bool CanEquip(IEquipment? equipment)
    {
        return equipment != null && ProjectPioneerGame.CanEquip(equipment);
    }

    private void EquipSelectedItem()
    {
        ProjectPioneerGame.EquipEquipment(_selectedEquipment?.Equipment!, ProjectPioneerGame.Hero);
        _selectedEquipment!.Equipment = null;
        Refresh();
        InventoryCallback.InvokeAsync().ConfigureAwait(false).GetAwaiter().GetResult();
    }

    private void SellSelectedItem()
    {
        ProjectPioneerGame.SellEquipment(_selectedEquipment?.Equipment!);
        _selectedEquipment!.Equipment = null;
        Refresh();
        InventoryCallback.InvokeAsync().ConfigureAwait(false).GetAwaiter().GetResult();
    }

    private void SortInventory()
    {
        ProjectPioneerGame.SortEquipment();
        _selectedEquipment!.Equipment = null;
        Refresh();
        InventoryCallback.InvokeAsync().ConfigureAwait(false).GetAwaiter().GetResult();
    }

    private void SetDisplayedItem(EquipmentDisplay equipmentDisplay)
    {
        // Remove selection if the user is re-selecting it
        if (_selectedEquipment?.Equipment != null && _selectedEquipment.Index == equipmentDisplay.Index)
        {
            _selectedEquipment = new EquipmentDisplay()
            {
                Index = -1
            };
        }
        else
        {
            _selectedEquipment = new EquipmentDisplay()
            {
                Index = equipmentDisplay.Index,
                Equipment = _inventory?[equipmentDisplay.Index]
            };
        }

        SetUpHeroEquipmentComparison();
    }

    public void SetDisplayedItemString(string stringIndex)
    {
        int.TryParse(stringIndex, out int index);

        EquipmentDisplay equipmentDisplay = new EquipmentDisplay()
        {
            Index = index,
            Equipment = _inventory?[index]
        };

        SetDisplayedItem(equipmentDisplay);
    }

    private void SetUpHeroEquipmentComparison()
    {
        if (_selectedEquipment?.Equipment != null)
        {
            switch(_selectedEquipment.Equipment.EquipmentType)
            {
                case EquipmentType.Armor:
                    _statsHeroEquipment = ProjectPioneerGame.GetEquippedArmor().Stats;
                    break;
                case EquipmentType.Aura:
                    _statsHeroEquipment = ProjectPioneerGame.GetEquippedAura().Stats;
                    break;
                default:
                    _statsHeroEquipment = ProjectPioneerGame.GetEquippedWeapon().Stats;
                    break;
            }
        }
        else
        {
            _statsHeroEquipment = null!;
        }
    }
}