@inject ILogger<CompareStatsDisplay> Logger
@* <h3>Compare Stats Display</h3> *@

<table class="table">
    <thead>
    @if (ShowHeader)
    {
        <tr>
            <th>Stats</th>
        </tr>
    }
    
    </thead>
    <tbody>
        <tr>
            <td>
                @for (int i = 0; i < GetStatCount(); i++)
                {
                    var stat = _stats1Array![i];
                    var comparedStat = _comparedStatsArray![i];

                    if (Multipliers.Any() && Multipliers.Contains(@GetExtractedStatType(stat).Replace(" ", "")))
                    {
                        <b>@GetExtractedStatType(stat)</b>
                    }
                    else
                    {
                        @GetExtractedStatType(stat)
                    }
                    <text>&nbsp;</text>@GetStatNumber(stat)<span style="@GetStatColor(comparedStat)"><text>&nbsp;</text>@GetStatPlusOrMinus(comparedStat)@GetStatNumber(comparedStat)</span>
                    <br/>
                }
            </td>
        </tr>
    </tbody>
</table>

@code {

    [Parameter]
    public bool ShowHeader { get; set; } = true;
    
    [Parameter]
    public Stats? Stats1 { get; set; }

    [Parameter]
    public Stats? Stats2 { get; set; }

    [Parameter]
    public List<string> Multipliers { get; set; } = new List<string>();

    [Parameter]
    public bool IsComparingForQuest { get; set; }

    private string[]? _stats1Array;
    private string[]? _comparedStatsArray;
    
    protected override void OnInitialized()
    {
        Refresh();
    }
    
    private void Refresh()
    {
        _stats1Array = Stats1!.GetStatsAsList().ToArray();
        _comparedStatsArray = GetComparedStats().ToArray();
    }

    private int GetStatCount()
    {
        Refresh();

        return _stats1Array!.Length;
    }

    private List<string> GetComparedStats()
    {
        try
        {
            if (IsComparingForQuest)
            {
                return Stats1?.GetStatComparisonForQuest(Stats2).GetStatsAsList()!;
            }
            return Stats1?.GetStatComparisonForItems(Stats2).GetStatsAsList()!;
        }
        catch
        {
            Logger.LogInformation("Failed to compare stats");
        }
        return new Stats().GetStatsAsList();
    }

    private string GetExtractedStatType(string stat)
    {
        // The following Regex gets the text up until the ':'
        // ^.*?(?=:)
        return Regex.Match(stat, @"^.*?(?=:)").Value;
    }

    private string GetStatNumber(string stat)
    {
        // The following Regex gets the numbers out of the string, including potentially negative numbers
        // -?\d+$
        return Regex.Match(stat, @"-?\d+$").Value;
    }

    private string GetStatColor(string stat)
    {
        int.TryParse(GetStatNumber(stat), out int statValue);
        
        string statStyle = $"color:@@color";

        if (statValue > 0)
        {
            statStyle = statStyle.Replace("@@color", "green");
        }
        else if (statValue < 0)
        {
            statStyle = statStyle.Replace("@@color", "red");
        }
        else
        {
            statStyle = statStyle.Replace("@@color", "blue");
        }

        return statStyle;
    }

    private string GetStatPlusOrMinus(string stat)
    {
        int.TryParse(GetStatNumber(stat), out int statValue);
        
        string plusOrMinus = $"";

        if (statValue > 0)
        {
            plusOrMinus = "+";
        }
        else if (statValue < 0)
        {
            plusOrMinus = ""; // Number is already negative so this will double the "-"
        }
        else
        {
            plusOrMinus = "=";
        }

        return plusOrMinus;
    }

}
