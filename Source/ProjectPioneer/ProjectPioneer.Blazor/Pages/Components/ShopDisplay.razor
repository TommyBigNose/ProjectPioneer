@using ProjectPioneer.Blazor.Pages.Elements
@using ProjectPioneer.Blazor.Pages.Components;

@inject ILogger<ShopDisplay> Logger
@inject ProjectPioneer.Systems.IGame ProjectPioneerGame

<h3>ShopDisplay</h3>

<button type="button" class="btn btn-primary" disabled="@(!CanBuyItem(_selectedEquipment.Equipment))" @onclick="@(_ => BuySelectedItem())">
    Buy Selected Item
</button>
<br />

<table class="table">
    <thead>
        <tr>
            <th>Equipment</th>
            <th>Comparison</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                @foreach (var item in _equipmentCatalog)
                {
                    <EquipmentButton ClickCallback="@SetDisplayedItemString" CurrentEquipment="@item" SelectedEquipment="@_selectedEquipment" IsShop=true />
                    <br />
                }
            </td>
            <td>
                @if (_selectedEquipment != null && _selectedEquipment.Equipment != null && _statsHeroEquipment != null)
                {
                    <CompareStatsDisplay Stats1="@_selectedEquipment.Equipment.Stats" Stats2="@_statsHeroEquipment" />
                }
            </td>
        </tr>
    </tbody>
</table>

@code {
    [Parameter]
    public EventCallback<string> ShopCallback { get; set; }

    List<IEquipment> _shopStock;
    List<EquipmentDisplay> _equipmentCatalog;
    EquipmentDisplay _selectedEquipment;

    Stats _statsHeroEquipment;

    protected override void OnInitialized()
    {
        _equipmentCatalog = new();
        _selectedEquipment = new();
        _shopStock = new List<IEquipment>();
        Refresh();
    }

    public void Refresh()
    {
        _shopStock.Clear();
        _equipmentCatalog.Clear();
        _shopStock = ProjectPioneerGame.GetShopInventory(ProjectPioneerGame.Hero.Stats.Level).ToList();

        for (int i = 0; i < _shopStock.Count; i++)
        {
            _equipmentCatalog.Add(new EquipmentDisplay()
                {
                    Index = i,
                    Equipment = _shopStock[i]
                });
        }

        base.InvokeAsync(StateHasChanged);
    }

    private void BuySelectedItem()
    {
        ProjectPioneerGame.BuyEquipmentAndAddToInventory(_selectedEquipment.Equipment, ProjectPioneerGame.Inventory);
        _selectedEquipment.Equipment = null;
        Refresh();
        ShopCallback.InvokeAsync().ConfigureAwait(false).GetAwaiter().GetResult();
    }

    public bool CanBuyItem(IEquipment equipment)
    {
        return (_selectedEquipment.Equipment != null &&
            ProjectPioneerGame.CanHeroAffordEquipment(equipment, ProjectPioneerGame.Inventory) &&
            CanEquip(equipment));
    }

    private bool CanEquip(IEquipment equipment)
    {
        if (equipment == null)
        {
            return false;
        }
        else
        {
            return ProjectPioneerGame.CanEquip(equipment);
        }
    }

    private void SetDisplayedItem(EquipmentDisplay equipmentDisplay)
    {
        // Remove selection if the user is re-selecting it
        if (_selectedEquipment.Equipment != null && _selectedEquipment.Index == equipmentDisplay.Index)
        {
            _selectedEquipment = new EquipmentDisplay()
            {
                Index = -1
            };
        }
        else
        {
            _selectedEquipment = new EquipmentDisplay()
            {
                Index = equipmentDisplay.Index,
                Equipment = _shopStock[equipmentDisplay.Index]
            };
        }

        SetUpHeroEquipmentComparison();
    }

    public void SetDisplayedItemString(string stringIndex)
    {
        int.TryParse(stringIndex, out int index);

        EquipmentDisplay equipmentDisplay = new EquipmentDisplay()
            {
                Index = index,
                Equipment = _shopStock[index]
            };

        SetDisplayedItem(equipmentDisplay);
    }

    private void SetUpHeroEquipmentComparison()
    {
        if (_selectedEquipment != null && _selectedEquipment.Equipment != null)
        {
            switch (_selectedEquipment.Equipment.EquipmentType)
            {
                case EquipmentType.Armor:
                    _statsHeroEquipment = ProjectPioneerGame.GetEquippedArmor().Stats;
                    break;
                case EquipmentType.Aura:
                    _statsHeroEquipment = ProjectPioneerGame.GetEquippedAura().Stats;
                    break;
                default:
                    _statsHeroEquipment = ProjectPioneerGame.GetEquippedWeapon().Stats;
                    break;
            }
        }
        else
        {
            _statsHeroEquipment = null;
        }
    }
}
