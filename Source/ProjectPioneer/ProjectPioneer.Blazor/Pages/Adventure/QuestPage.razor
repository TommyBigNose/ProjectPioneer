@page "/Adventure/QuestPage"
@page "/Adventure/QuestPage/{QuestID}"

@using ProjectPioneer.Systems.Adventure;
@using System.Collections;
@using System.Timers;
@using ProjectPioneer.Systems.Statistics;

@inject NavigationManager NavManager
@inject ILogger<QuestPage> Logger
@inject ProjectPioneer.Systems.IGame ProjectPioneerGame

<h3>Quest Page</h3>
<br />

Name: @_quest.QuestInfo.Name
<br />
Description: @_quest.QuestInfo.Description
<br />
Quest Length in Seconds: @_quest.QuestInfo.QuestLengthInSeconds
<br />
Quest Final Quest Length in Seconds: @_quest.OnGoingQuest.FinalQuestLengthInSeconds
<br />
Is Quest Ongoing?: @_quest.IsQuestOnGoing()
<br />
Quest Status?: @_quest.Status
<br />
Chances for Loot: @_quest.QuestInfo.TotalChancesForLoot
<br />

<br />
<br />

<ProjectPioneer.Blazor.Pages.Elements.AnimatedProgressBar CurrentValue=0.0f IncomingAdditionalValue=100.0f FillInDelay_ms=300 />

<br />
<br />

<progress style="width: 200px; height: 100px" value="@_quest.OnGoingQuest.ProgressBar.Value" max="1000.0"></progress>

<br />

@for (int i = 1; i <= @_quest.QuestInfo.TotalChancesForLoot; i++)
{
    <span style="padding-left: @_paddingStyle">|</span>
}

<br />

<button type="button" class="btn btn-warning" disabled="@(!_quest.IsQuestCompleted())" @onclick="@(_ => CollectRewards())">
    Collect Rewards
</button>

<button type="button" class="btn btn-danger" disabled="@(_quest.IsQuestCompleted())" @onclick="@(_ => CancelQuest())">
    Cancel Quest
</button>

<br />
<br />
@*<style>
    /*progress::-moz-progress-bar {
        background: yellow;
    }

    progress::-webkit-progress-value {
        background: yellow;
    }*/

    progress {
        appearance: progress-bar;
        display: inline-block;
        color: yellow;
        background-color: yellow;
    }
</style>*@
@*<progress value="@ProjectPioneerGame.Hero.Exp" max="@ProjectPioneerGame.GetRequiredExp()"></progress>
<progress value="@ProjectPioneerGame.Hero.Exp" max="@ProjectPioneerGame.GetRequiredExp()"></progress>*@

<br /><br />

<button hidden="hidden" @onclick=@(async () => await PlaySound("/sounds/Windows_Balloon.wav", 1000))>Play</button>
<button hidden="hidden" @onclick=@(async () => await PlaySound("/sounds/Windows_Logon.wav", 5000))>Play2</button>
@if (!_hiddenSound)
{
    <audio autoplay controls hidden="hidden"><source src="@_soundSrcUrl" /></audio>
}
else
{
    <audio controls muted hidden="hidden"><source src="@_soundSrcUrl" /></audio>
}


@code {
    [Parameter]
    public string QuestID { get; set; }

    private IQuest _quest;
    private int _currentLootCount = 0;

    // UI stuff
    private int _padding = 0;
    private string _paddingStyle = string.Empty;

    bool _hiddenSound = true;
    string _soundSrcUrl = "/sounds/Windows_Balloon.wav";

    protected override void OnInitialized()
    {
        _quest = ProjectPioneerGame.GetAllQuests().First(_ => _.QuestInfo.ID == int.Parse(QuestID));
        _quest.OnGoingQuest.QuestTimer.Elapsed += TimerOnElapsed;

        Stats comparedStats = _quest.GetStatComparison(ProjectPioneerGame.Hero.Stats);

        _quest.StartQuest(comparedStats);
        _padding = 200 / _quest.QuestInfo.TotalChancesForLoot;
        _paddingStyle = $"{_padding}px";

    }

    private async void TimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        await base.InvokeAsync(StateHasChanged);

        if (!_quest.IsQuestCompleted())
        {
            await HasHitLootInterval();
        }

        if(_quest.IsQuestCompleted())
        {
            _quest.CompleteQuest();
            await PlaySound("/sounds/Windows_Logon.wav", 5000).ConfigureAwait(false);
        }
        await base.InvokeAsync(StateHasChanged);
    }

    private void CollectRewards()
    {
        ProjectPioneerGame.RewardHeroForQuest(_quest);
        ProjectPioneerGame.CompleteQuest(_quest);
        NavManager.NavigateTo($"/Game/MainGame");
    }

    private async void CancelQuest()
    {
        _quest.CancelQuest();
        await PlaySound("/sounds/Windows_Notify.wav", 1500).ConfigureAwait(false);
        NavManager.NavigateTo($"/Game/MainGame");
    }

    private async Task HasHitLootInterval()
    {
        if (_quest.IsProgressReadyForLootChance())
        //if (_currentLootCount < _quest.OnGoingQuest.LootedEquipment.Count)
        {
            //_currentLootCount++;
            //_quest.QuestInfo.ChanceForRareLoot = 1000; // For testing noises =) 
            _quest.AttemptLootChance();
            if (!_quest.IsQuestCompleted())
            {
                if (_quest.IsLastLootRare())
                {
                    await PlaySound("/sounds/Windows_Tada.wav", 1000).ConfigureAwait(false);
                }
                else
                {
                    await PlaySound("/sounds/Windows_Balloon.wav", 1000).ConfigureAwait(false);
                }

            }
        }
    }

    private async Task PlaySound(string srcUrl, int soundLengthInMs)
    {
        _soundSrcUrl = srcUrl;
        _hiddenSound = false;
        await base.InvokeAsync(StateHasChanged);
        await Task.Delay(soundLengthInMs);
        _hiddenSound = true;
    }
}
