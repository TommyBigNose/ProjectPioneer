@page "/Adventure/QuestPage"
@page "/Adventure/QuestPage/{QuestID}"

@using ProjectPioneer.Blazor.Pages.Elements

@inject NavigationManager NavManager
@inject ILogger<QuestPage> Logger
@inject ProjectPioneer.Systems.IGame ProjectPioneerGame

<h3>Quest Page</h3>
<br />

<div class="border border-3 border-dark rounded" style="width: 800px; height: 600px; background-image:url('./art/backgrounds/forest-1-poc.png');">
    
</div>

<div class="border border-3 border-dark rounded" style="width: 800px; height: auto;">
    
    <table class="table table-striped">
        <tbody>
            <tr>
                <td>
                    Name: @_quest.QuestInfo.Name
                </td>
            </tr>
            <tr>
                <td>
                    Description: @_quest.QuestInfo.Description
                </td>
            </tr>
            <tr>
                <td>
                    Quest Length in Seconds: @_quest.QuestInfo.QuestLengthInSeconds
                </td>
            </tr>
            <tr>
                <td>
                    Quest Final Quest Length in Seconds: @_quest.OnGoingQuest.FinalQuestLengthInSeconds
                </td>
            </tr>
            <tr>
                <td>
                    Is Quest Ongoing?: @_quest.IsQuestOnGoing()
                </td>
            </tr>
            <tr>
                <td>
                    Quest Status?: @_quest.Status
                </td>
            </tr>
            <tr>
                <td>
                    Chances for Loot: @_quest.QuestInfo.TotalChancesForLoot
                </td>
            </tr>
            <tr>
                <td>
                    Gathered Loot:
                    @foreach(IEquipment? loot in _quest.OnGoingQuest.LootedEquipment)
                    {
                        <ul>
                            <li>
                                @if (loot != null)
                                {
                                    <QuestLootItemDisplay LootableItem="@loot" ColorTheme="bg-secondary"/>
                                }
                                else
                                {
                                    SymbolHelper.GetCheckmarkOrX(false);
                                }
                            </li>
                        </ul>
                    }
                </td>
            </tr>
        </tbody>
    </table>
    
    <br />
    <br />
    <AnimatedProgressBar @ref=_animatedQuestBar
                         CurrentValue=@_quest.OnGoingQuest.ProgressBar.Value
                         IncomingAdditionalValue=@_quest.OnGoingQuest.ProgressBar.IncrementRate
                         FillInDelayInMs=@((int)(_quest.OnGoingQuest.ProgressBar.IncrementTickRateInMs * 0.75f))
                         MaxValue="@_quest.OnGoingQuest.ProgressBar.ValueMax"
                         ShowIconsBelowBar="true"
                         NumberOfIcons=@_quest.QuestInfo.TotalChancesForLoot
                         ProgressBarWidth="700"
                         ProgressBarHeight="50"/>

    <br/>
    <br/>

    <StandardButton ButtonClass="@StylingHelper.Btn_Class_Warning"
                    Disabled="@(!_quest.IsQuestCompleted())"
                    ButtonText="Collect Rewards"
                    ClickCallback="@(_ => CollectRewards())"
                    ClickCallbackParameter=""/>

    <StandardButton ButtonClass="@StylingHelper.Btn_Class_Danger"
                    Disabled="@(_quest.IsQuestCompleted())"
                    ButtonText="Cancel Quest"
                    ClickCallback="@(_ => CancelQuest())"
                    ClickCallbackParameter=""/>

</div>

@if (!_hiddenSound)
{
    <audio autoplay controls hidden="hidden"><source src="@_soundSrcUrl" /></audio>
}
else
{
    <audio controls muted hidden="hidden"><source src="@_soundSrcUrl" /></audio>
}

<AudioFxPlayer @ref="_audioFxPlayer"/>

@code {
    [Parameter]
    public string? QuestID { get; set; }

    private AnimatedProgressBar? _animatedQuestBar;

    private IQuest _quest = null!;

    // UI stuff
    private int _padding = 0;
    private string _paddingStyle = string.Empty;

    bool _hiddenSound = true;
    private AudioFxPlayer? _audioFxPlayer;
    
    string _soundSrcUrl = AudioFxHelper.Fx_Positive_Url;
    bool _currentlyLooting = false;

    protected override void OnInitialized()
    {
        _animatedQuestBar = new AnimatedProgressBar();

        _quest = ProjectPioneerGame.GetAllQuests().First(_ => _.QuestInfo.ID == int.Parse(QuestID!));
        _quest.OnGoingQuest.QuestTimer.Elapsed += TimerOnElapsed;

        Stats comparedStats = _quest.GetStatComparison(ProjectPioneerGame.Hero.Stats);

        _quest.StartQuest(comparedStats);
        _padding = 200 / _quest.QuestInfo.TotalChancesForLoot;
        _paddingStyle = $"{_padding}px";

        _audioFxPlayer = new AudioFxPlayer();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _audioFxPlayer.PlaySoundAsync(AudioFxHelper.Fx_Calm_6_Url);
    }


    private async void TimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        await _animatedQuestBar!.AddValue();
        await base.InvokeAsync(StateHasChanged);

        if (!_quest.IsQuestCompleted())
        {
            await HasHitLootInterval();
        }

        if(_quest.IsQuestCompleted())
        {
            await HasHitLootInterval();
            _quest.CompleteQuest();
            await PlaySound(AudioFxHelper.Fx_Success_Url, 5000).ConfigureAwait(false);
        }
        await base.InvokeAsync(StateHasChanged);
    }

    private void CollectRewards()
    {
        ProjectPioneerGame.RewardHeroForQuest(_quest);
        ProjectPioneerGame.CompleteQuest(_quest);
        NavManager.NavigateTo($"/Game/MainGame");
    }

    private async void CancelQuest()
    {
        _quest.CancelQuest();
        await PlaySound(AudioFxHelper.Fx_Negative_Url, 1500).ConfigureAwait(false);
        NavManager.NavigateTo($"/Game/MainGame");
    }

    private async Task HasHitLootInterval()
    {
        if (_quest.IsProgressReadyForLootChance() && !_currentlyLooting)
        {
            _currentlyLooting = true;
            _quest.AttemptLootChance();
            if (!_quest.IsQuestCompleted())
            {
                if (_quest.IsLastLootRare())
                {
                    await PlaySound(AudioFxHelper.Fx_Cheer_Url, 1000).ConfigureAwait(false);
                }
                else
                {
                    await PlaySound(AudioFxHelper.Fx_Positive_Url, 1000).ConfigureAwait(false);
                }
            }
            _currentlyLooting = false;
        }
    }

    private async Task PlaySound(string srcUrl, int soundLengthInMs)
    {
        _soundSrcUrl = srcUrl;
        _hiddenSound = false;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(soundLengthInMs);
        _hiddenSound = true;
    }
}