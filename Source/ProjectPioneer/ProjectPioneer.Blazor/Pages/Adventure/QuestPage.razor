@page "/Adventure/QuestPage"
@page "/Adventure/QuestPage/{QuestID}"

@using ProjectPioneer.Systems.Adventure;
@using System.Collections;
@using System.Timers;
@using ProjectPioneer.Systems.Statistics;

@inject NavigationManager NavManager
@inject ILogger<QuestPage> Logger
@inject ProjectPioneer.Systems.IGame ProjectPioneerGame

<h3>Quest Page</h3>
<br />

Name: @_quest.QuestInfo.Name
<br />
Description: @_quest.QuestInfo.Description
<br />
Quest Length in Seconds: @_quest.QuestInfo.QuestLengthInSeconds
<br />
Quest Final Quest Length in Seconds: @_quest.OnGoingQuest.FinalQuestLengthInSeconds
<br />
Is Quest Ongoing?: @_quest.IsQuestOnGoing()
<br />
Chances for Loot: @_quest.QuestInfo.TotalChancesForLoot
<br />


<br />
<br />

<progress style="width: 200px; height: 100px" value="@_quest.OnGoingQuest.ProgressBar.Value" max="1000.0"></progress>

<br />

@for (int i = 1; i <= @_quest.QuestInfo.TotalChancesForLoot; i++)
{
    <span style="padding-left: @_paddingStyle">|</span>
}

<br /><br />
<button @onclick=@(async () => await PlaySound("/sounds/Windows_Balloon.wav"))>Play</button>
@if (!_hiddenSound)
{
    <audio autoplay controls hidden="hidden"><source src="@_soundSrcUrl" /></audio>
}
else
{
    <audio controls muted hidden="hidden"><source src="@_soundSrcUrl" /></audio>
}


@code {
    [Parameter]
    public string QuestID { get; set; }

    private IQuest _quest;
    private int _currentLootCount = 0;

    // UI stuff
    private int _padding = 0;
    private string _paddingStyle = string.Empty;

    bool _hiddenSound = true;
    string _soundSrcUrl = "/sounds/Windows_Balloon.wav";

    protected override void OnInitialized()
    {
        _quest = ProjectPioneerGame.GetAllQuests().First(_ => _.QuestInfo.ID == int.Parse(QuestID));
        _quest.OnGoingQuest.QuestTimer.Elapsed += TimerOnElapsed;

        Stats comparedStats = _quest.GetStatComparison(ProjectPioneerGame.Hero.Stats);

        _quest.StartQuest(comparedStats);
        _padding = 200 / _quest.QuestInfo.TotalChancesForLoot;
        _paddingStyle = $"{_padding}px";

    }

    private void TimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        base.InvokeAsync(StateHasChanged);

        HasHitLootInterval();

        if(_quest.IsQuestCompleted())
        {
            _quest.CompleteQuest();
            ProjectPioneerGame.AddCredits(_quest.GetCreditsReward());
            ProjectPioneerGame.AddExp(_quest.GetExpReward());
            _quest.GetEquipmentReward().ToList().ForEach(_ => ProjectPioneerGame.AddEquipment(_));
            PlaySound("/sounds/Windows_Logon.wav").ConfigureAwait(true).GetAwaiter().GetResult();
            NavManager.NavigateTo($"/Game/MainGame");
        }
    }

    private bool HasHitLootInterval()
    {
        if (_currentLootCount < _quest.OnGoingQuest.LootedEquipment.Count)
        {
            _currentLootCount++;
            PlaySound(_soundSrcUrl).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        return false;
    }

    private async Task PlaySound(string srcUrl)
    {
        _hiddenSound = false;
        await Task.Delay(500);
        _hiddenSound = true;
    }
}
