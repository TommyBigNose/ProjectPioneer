@page "/Adventure/QuestPage"
@page "/Adventure/QuestPage/{QuestID}"

@using ProjectPioneer.Blazor.Pages.Elements

@inject NavigationManager NavManager
@inject ILogger<QuestPage> Logger
@inject ProjectPioneer.Systems.IGame ProjectPioneerGame

<div style="width: 800px; height: 600px; background-image:url('./art/backgrounds/forest-1-poc.png');">
@* <div style="background-image:url('./art/backgrounds/forest-1-poc.png');"> *@
    
    <h3>Quest Page</h3>
    <br />

    Name: @_quest.QuestInfo.Name
    <br />
    Description: @_quest.QuestInfo.Description
    <br />
    Quest Length in Seconds: @_quest.QuestInfo.QuestLengthInSeconds
    <br />
    Quest Final Quest Length in Seconds: @_quest.OnGoingQuest.FinalQuestLengthInSeconds
    <br />
    Is Quest Ongoing?: @_quest.IsQuestOnGoing()
    <br />
    Quest Status?: @_quest.Status
    <br />
    Chances for Loot: @_quest.QuestInfo.TotalChancesForLoot
    <br />

    <br />
    <br />

    <AnimatedProgressBar @ref=_animatedQuestBar
        CurrentValue=@_quest.OnGoingQuest.ProgressBar.Value 
        IncomingAdditionalValue=@_quest.OnGoingQuest.ProgressBar.IncrementRate
        FillInDelayInMs=@((int)(_quest.OnGoingQuest.ProgressBar.IncrementTickRateInMs * 0.75f)) 
        MaxValue="@_quest.OnGoingQuest.ProgressBar.ValueMax"
        ShowIconsBelowBar="true"
        NumberOfIcons=@_quest.QuestInfo.TotalChancesForLoot
        ProgressBarWidth="700"
        ProgressBarHeight="50"/>

    <br />
    <br />

    <progress style="width: 200px; height: 100px" value="@_quest.OnGoingQuest.ProgressBar.Value" max="1000.0"></progress>

    <br />

    @for (int i = 1; i <= @_quest.QuestInfo.TotalChancesForLoot; i++)
    {
        <span style="padding-left: @_paddingStyle">|</span>
    }

    <br />

    <StandardButton ButtonClass="btn-warning"
                    Disabled="@(!_quest.IsQuestCompleted())"
                    ButtonText="Collect Rewards"
                    ClickCallback="@(_ => CollectRewards())"
                    ClickCallbackParameter=""/>

    <StandardButton ButtonClass="btn-danger"
                    Disabled="@(_quest.IsQuestCompleted())"
                    ButtonText="Cancel Quest"
                    ClickCallback="@(_ => CancelQuest())"
                    ClickCallbackParameter=""/>

    <br />
    <br />

    @if (!_hiddenSound)
    {
        <audio autoplay controls hidden="hidden"><source src="@_soundSrcUrl" /></audio>
    }
    else
    {
        <audio controls muted hidden="hidden"><source src="@_soundSrcUrl" /></audio>
    }
</div>

@code {
    [Parameter]
    public string? QuestID { get; set; }

    private AnimatedProgressBar? _animatedQuestBar;

    private IQuest _quest = null!;

    // UI stuff
    private int _padding = 0;
    private string _paddingStyle = string.Empty;

    bool _hiddenSound = true;
    string _soundSrcUrl = AudioFxHelper.Fx_Positive_Url;

    protected override void OnInitialized()
    {
        _animatedQuestBar = new AnimatedProgressBar();

        _quest = ProjectPioneerGame.GetAllQuests().First(_ => _.QuestInfo.ID == int.Parse(QuestID!));
        _quest.OnGoingQuest.QuestTimer.Elapsed += TimerOnElapsed;

        Stats comparedStats = _quest.GetStatComparison(ProjectPioneerGame.Hero.Stats);

        _quest.StartQuest(comparedStats);
        _padding = 200 / _quest.QuestInfo.TotalChancesForLoot;
        _paddingStyle = $"{_padding}px";

    }

    private async void TimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        await _animatedQuestBar!.AddValue();
        await base.InvokeAsync(StateHasChanged);

        if (!_quest.IsQuestCompleted())
        {
            await HasHitLootInterval();
        }

        if(_quest.IsQuestCompleted())
        {
            _quest.CompleteQuest();
            await PlaySound(AudioFxHelper.Fx_Success_Url, 5000).ConfigureAwait(false);
        }
        await base.InvokeAsync(StateHasChanged);
    }

    private void CollectRewards()
    {
        ProjectPioneerGame.RewardHeroForQuest(_quest);
        ProjectPioneerGame.CompleteQuest(_quest);
        NavManager.NavigateTo($"/Game/MainGame");
    }

    private async void CancelQuest()
    {
        _quest.CancelQuest();
        await PlaySound(AudioFxHelper.Fx_Negative_Url, 1500).ConfigureAwait(false);
        NavManager.NavigateTo($"/Game/MainGame");
    }

    private async Task HasHitLootInterval()
    {
        if (_quest.IsProgressReadyForLootChance())
        {
            _quest.AttemptLootChance();
            if (!_quest.IsQuestCompleted())
            {
                if (_quest.IsLastLootRare())
                {
                    await PlaySound(AudioFxHelper.Fx_Cheer_Url, 1000).ConfigureAwait(false);
                }
                else
                {
                    await PlaySound(AudioFxHelper.Fx_Positive_Url, 1000).ConfigureAwait(false);
                }

            }
        }
    }

    private async Task PlaySound(string srcUrl, int soundLengthInMs)
    {
        _soundSrcUrl = srcUrl;
        _hiddenSound = false;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(soundLengthInMs);
        _hiddenSound = true;
    }
}
