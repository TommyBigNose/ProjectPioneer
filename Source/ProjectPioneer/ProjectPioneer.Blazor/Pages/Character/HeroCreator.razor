@page "/Character/HeroCreator"

@using System.ComponentModel.DataAnnotations
@using ProjectPioneer.Systems.Character
@using ProjectPioneer.Systems.Statistics;

@inject ILogger<HeroCreator> Logger
@inject ProjectPioneer.Systems.IGame ProjectPioneerGame

<h3>Hero Creator</h3>

Continue with this Hero?
<br />
@heroInput.Name
<br />
@heroInput.Job.Name
<br />
@heroInput.Implant.Name

<button class="btn btn-primary" type="submit">Submit</button>

<div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Info</th>
                <th>Input</th>
                <th>Description</th>
                <th>Level Up Bonuses</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Name</td>
                <td>
                    <EditForm Model="heroInput" OnSubmit="@HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <InputText @bind-Value=heroInput.Name />
                    </EditForm>
                </td>
                <td></td>
                <td></td>
            </tr>

            <tr>
                <td>Job</td>
                <td>
                    @foreach(var job in ProjectPioneerGame.GetAllJobs())
                    {
                        <button class="btn btn-primary" name="job@job.ID" @ref="jobElements[job.ID]" @onclick="@(_ => SetDisplayedJob(job))">
                            @job.Name
                        </button>
                        <br />
                    }
                </td>
                <td>@heroInput.Job.Description</td>
                <td>
                    <ProjectPioneer.Blazor.Pages.Components.StatsSimple Stats="@heroInput.Job.Stats" ShowLevel=false />
                </td>
            </tr>

            <tr>
                <td>Implant</td>
                 <td>
                    @foreach (var implant in ProjectPioneerGame.GetAllImplants())
                    {
                        <button class="btn btn-primary" name="implant@implant.ID" @ref="implantElements[implant.ID]" @onclick="@(_ => SetDisplayedImplant(implant))">
                            @implant.Name
                            </button>
                            <br />
                    }
                </td>
                <td>@heroInput.Implant.Description</td>
                <td>
                    <ProjectPioneer.Blazor.Pages.Components.StatsSimple Stats="@heroInput.Implant.Stats" ShowLevel=false />
                </td>
            </tr>
        </tbody>
    </table>
</div>

@code {
    private Dictionary<int, ElementReference> jobElements = new Dictionary<int, ElementReference>();
    private Dictionary<int, ElementReference> implantElements = new Dictionary<int, ElementReference>();
    HeroInput heroInput = new HeroInput();

    string selectedStyle = "style=\"background-color:blue; color:white;\"";
    string unselectedStyle = "style=\"background-color:gray; color:white;\"";

    protected override void OnInitialized()
    {
        heroInput.Job = ProjectPioneerGame.GetAllJobs().First();
        heroInput.Implant = ProjectPioneerGame.GetAllImplants().First();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    await jobElements.First().Value.FocusAsync();
        //    await implantElements.First().Value.FocusAsync();
        //}
        //jobElements.First().Value.
    }

    private void SetDisplayedJob(IJob job)
    {
        heroInput.Job = job;
    }

    private void SetDisplayedImplant(IImplant implant)
    {
        heroInput.Implant = implant;
    }

    private void HandleSubmit()
    {
        Logger.LogInformation("HandleSubmit called");

        // Process the form
    }

    //style="background-color:blue; color:white;"

    public class HeroInput
    {
        [Required]
        [StringLength(maximumLength: 10, MinimumLength = 2, ErrorMessage = "Name must be between 2 and 10 characters.")]
        public string? Name { get; set; }
        
        [Required]
        public IJob? Job { get; set; }
        
        [Required]
        public IImplant? Implant { get; set; }
    }
}
