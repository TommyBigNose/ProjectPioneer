@page "/Character/HeroCreator"

@inject ILogger<HeroCreator> Logger
@inject Systems.IGame ProjectPioneerGame

<h3>Hero Creator</h3>

<ProjectPioneer.Blazor.Pages.Components.SaveLoadMenu ClickCallback="@Callback" />

<br />
Continue with this Hero?
<br />
@_heroInput?.Name
<br />
@_heroInput?.Job?.Name
<br />
@_heroInput?.Implant?.Name
<br />

<EditForm Model=@_heroInput OnValidSubmit=@HandleValidSubmit>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <button type="submit" class="btn btn-primary">Create Hero</button>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Info</th>
                    <th>Input</th>
                    <th>Description</th>
                    <th>Stat Information</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Name</td>
                    <td>
                        <InputText @bind-Value=_heroInput!.Name />
                    </td>
                    <td></td>
                    <td></td>
                </tr>

                <tr>
                    <td>Job</td>
                    <td>
                        @foreach(var job in ProjectPioneerGame.GetAllJobs())
                        {
                            <button type="button" class="btn @GetJobStyle(job.ID)" name="job@job.ID" @onclick="@(_ => SetDisplayedJob(job))">
                                @job.Name
                            </button>
                            <br />
                        }
                    </td>
                    <td>@_heroInput?.Job?.Description</td>
                    <td>
                        <ProjectPioneer.Blazor.Pages.Components.HeroCreatorStatsSimple Stats="@_heroInput?.Job?.Stats" />
                    </td>
                </tr>

                <tr>
                    <td>Implant</td>
                     <td>
                        @foreach (var implant in ProjectPioneerGame.GetAllImplants())
                        {
                            <button type="button" class="btn @GetImplantStyle(implant.ID)" name="implant@implant.ID" @onclick="@(_ => SetDisplayedImplant(implant))">
                                @implant.Name
                            </button>
                            <br />
                        }
                    </td>
                    <td>@_heroInput?.Implant?.Description</td>
                    <td>
                        <ProjectPioneer.Blazor.Pages.Components.HeroCreatorStatsSimple Stats="@_heroInput?.Implant?.Stats" />
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</EditForm>
@code {
    readonly HeroInput? _heroInput = new HeroInput();

    protected override void OnInitialized()
    {
        _heroInput!.Job = ProjectPioneerGame.GetAllJobs().First();
        _heroInput!.Implant = ProjectPioneerGame.GetAllImplants().First();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     //if (firstRender)
    //     //{
    //     //    await jobElements.First().Value.FocusAsync();
    //     //    await implantElements.First().Value.FocusAsync();
    //     //}
    //     //jobElements.First().Value.
    // }

    private void SetDisplayedJob(IJob job)
    {
        _heroInput!.Job = job;
    }

    private void SetDisplayedImplant(IImplant implant)
    {
        _heroInput!.Implant = implant;
    }

    public string GetJobStyle(int id)
    {
        return _heroInput!.Job!.ID == id ? "btn btn-info" : "btn btn-warning";
    }

    public string GetImplantStyle(int id)
    {
        return _heroInput!.Implant!.ID == id ? "btn btn-info" : "btn btn-warning";
    }

    private void HandleValidSubmit(EditContext editContext)
    {
        Logger.LogInformation("HandleValidSubmit called");

        // Process the form
        Logger.LogInformation("Creating Hero with {0}, {1}, {1}", new object[] { _heroInput!.Name!, _heroInput!.Job!.Name, _heroInput!.Implant!.Name });
        
        ProjectPioneerGame.SetUpHero(_heroInput!.Name!, _heroInput!.Job!, _heroInput!.Implant!);
        
        Logger.LogInformation("Created Hero with {0}, {1}, {1}", new object[] { _heroInput!.Name!, _heroInput!.Job!.Name, _heroInput!.Implant!.Name });
    }

    private void Callback()
    {
        InvokeAsync(StateHasChanged);
        Logger.LogInformation("HeroCreator Callback invoked");
    }

    public class HeroInput
    {
        [Required]
        [RegularExpression(@"^[a-zA-Z\s\d]+$", ErrorMessage = "Name must be letters, numbers or spaces")]
        [StringLength(maximumLength: 10, MinimumLength = 2, ErrorMessage = "Name must be between 2 and 10 characters.")]
        public string? Name { get; set; }
        
        [Required]
        public IJob? Job { get; set; }
        
        [Required]
        public IImplant? Implant { get; set; }
    }
}
