@page "/Character/HeroCreator"

@using System.ComponentModel.DataAnnotations
@using ProjectPioneer.Systems.Character
@using ProjectPioneer.Systems.Statistics;

@inject ILogger<HeroCreator> Logger
@inject ProjectPioneer.Systems.IGame ProjectPioneerGame

<h3>Hero Creator</h3>

<br />
Continue with this Hero?
<br />
@heroInput.Name
<br />
@heroInput.Job.Name
<br />
@heroInput.Implant.Name
<br />

<EditForm Model=@heroInput OnValidSubmit=@HandleValidSubmit>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <button type="submit" class="btn btn-primary">Create Hero</button>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Info</th>
                    <th>Input</th>
                    <th>Description</th>
                    <th>Stat Information</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Name</td>
                    <td>
                        <InputText @bind-Value=heroInput.Name />
                    </td>
                    <td></td>
                    <td></td>
                </tr>

                <tr>
                    <td>Job</td>
                    <td>
                        @foreach(var job in ProjectPioneerGame.GetAllJobs())
                        {
                            <button type="button" class="btn @GetJobStyle(job.ID)" name="job@job.ID" @onclick="@(_ => SetDisplayedJob(job))">
                                @job.Name
                            </button>
                            <br />
                        }
                    </td>
                    <td>@heroInput.Job.Description</td>
                    <td>
                        <ProjectPioneer.Blazor.Pages.Components.HeroCreatorStatsSimple Stats="@heroInput.Job.Stats" />
                    </td>
                </tr>

                <tr>
                    <td>Implant</td>
                     <td>
                        @foreach (var implant in ProjectPioneerGame.GetAllImplants())
                        {
                            <button type="button" class="btn @GetImplantStyle(implant.ID)" name="implant@implant.ID" @onclick="@(_ => SetDisplayedImplant(implant))">
                                @implant.Name
                            </button>
                            <br />
                        }
                    </td>
                    <td>@heroInput.Implant.Description</td>
                    <td>
                        <ProjectPioneer.Blazor.Pages.Components.HeroCreatorStatsSimple Stats="@heroInput.Implant.Stats" />
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</EditForm>
@code {
    //private Dictionary<int, ElementReference> jobElements = new Dictionary<int, ElementReference>();
    //private Dictionary<int, ElementReference> implantElements = new Dictionary<int, ElementReference>();
    HeroInput heroInput = new HeroInput();

    //style="background-color:blue; color:white;"
    string selectedStyle = "style=\"background-color:blue; color:white;\"";
    string unselectedStyle = "style=\"background-color:gray; color:white;\"";

    protected override void OnInitialized()
    {
        heroInput.Job = ProjectPioneerGame.GetAllJobs().First();
        heroInput.Implant = ProjectPioneerGame.GetAllImplants().First();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    await jobElements.First().Value.FocusAsync();
        //    await implantElements.First().Value.FocusAsync();
        //}
        //jobElements.First().Value.
    }

    private void SetDisplayedJob(IJob job)
    {
        heroInput.Job = job;
    }

    private void SetDisplayedImplant(IImplant implant)
    {
        heroInput.Implant = implant;
    }

    public string GetJobStyle(int id)
    {
        return heroInput.Job.ID == id ? "btn btn-info" : "btn btn-warning";
    }

    public string GetImplantStyle(int id)
    {
        return heroInput.Implant.ID == id ? "btn btn-info" : "btn btn-warning";
    }

    private void HandleValidSubmit(EditContext editContext)
    {
        Logger.LogInformation("HandleValidSubmit called");

        // Process the form
        Logger.LogInformation("Creating Hero with {0}, {1}, {1}", new object[] { heroInput.Name, heroInput.Job.Name, heroInput.Implant.Name });
        
        ProjectPioneerGame.SetUpHero(heroInput.Name, heroInput.Job, heroInput.Implant);
        
        Logger.LogInformation("Created Hero with {0}, {1}, {1}", new object[] { heroInput.Name, heroInput.Job.Name, heroInput.Implant.Name });
    }

    public class HeroInput
    {
        [Required]
        [RegularExpression(@"^[a-zA-Z\s\d]+$", ErrorMessage = "Name must be letters, numbers or spaces")]
        [StringLength(maximumLength: 10, MinimumLength = 2, ErrorMessage = "Name must be between 2 and 10 characters.")]
        public string? Name { get; set; }
        
        [Required]
        public IJob? Job { get; set; }
        
        [Required]
        public IImplant? Implant { get; set; }
    }
}
